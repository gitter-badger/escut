#!/usr/bin/env node

var prefixLines = require('../str/prefixLines');
var esprima = require('esprima')
var escope = require('escope')
var escodegen = require('escodegen')
var estraverse = require('estraverse')
var fs = require('fs')
var objectPath = require('object-path');
var _ = require('underscore')
var esquery = require('mustache-esquery')
var COMMANDS = require('require-children')('../commands', module);
_.each(COMMANDS, function(spec, name) {
    if (_.isString(spec)) COMMANDS[name] = require('../commands/' + name);
});

esquery.matchMustache = function(node, selector, ancestry) {
    var parts = selector.expr.split(/\s+/);
    var predicateParts = parts.shift().split('.');
    var args = parts;
    var moduleName = predicateParts.shift();
    var namespace = require('../predicates/' + moduleName);
    var predicate = objectPath.get(namespace, predicateParts);
    if (_.isFunction(predicate)) {
        return !!predicate(args, node, ancestry);
    }
    return false;
};

if (process.argv.length !== 5) {
    console.log('')
    console.log('Usage: escut selector command file.js')
    console.log('')
    console.log(prefixLines('# A CSS-like selector, see https://github.com/keeyip/esquery', '    '))
    console.log(prefixLines('@selector', '    '))
    _.each(COMMANDS, function(spec, name) {
        console.log('')
        var help = spec.help;
        if (help.description) console.log(prefixLines('# ' + help.description, '    '))
        console.log(prefixLines('@command ' + name + ' ' + _.pluck(help.arguments, 'name').join(' '), '    '))
        _.each(help.arguments, function(arg) {
            console.log('')
            console.log(prefixLines('# ' + arg.description, '        '))
            console.log(prefixLines('@param ' + arg.name, '        '))
        });
        if (help.detail) {
            console.log(prefixLines(help.detail, '        '))
        }
        _.each(help.examples, function(example) {
            console.log('')
            console.log(prefixLines('# ' + example.description, '        '))
            console.log(prefixLines('@example', '        '))
            var cli = 'escut "' + example.selector + '" "' + name + ' ' + example.argstring + '" file.js'
            console.log(prefixLines('@file.js ```' + example.input + '```', '            '))
            console.log(prefixLines('@sh ' + cli, '            '))
            console.log(prefixLines('@output  ```' + example.output + '```', '            '))
        });
    });
    console.log('')
    return;
}








var selector = process.argv[2]
var commandStr = process.argv[3]
var filenames = [process.argv[4]]
var codes = _.map(filenames, readIt)
var asts = _.map(codes, toAst)
var queryResults = _.map(asts, queryIt(selector))
var filteredResults = _.map(queryResults, filterIt(commandStr))

//=================================
console.log(filteredResults.join())
//=================================

function filterIt(str) {
    var commands = str.split(/\s*\|\s*/)
    return function(config) {
        estraverse.attachComments(config.ast, config.ast.comments, config.ast.tokens);

        return _.reduce(commands, function(result, command) {
            var matchSpace = command.match(/\s+/);
            if (matchSpace) {
                var commandName = command.substring(0, matchSpace.index);
                var arg = command.substring(matchSpace.index).trim();
                return COMMANDS[commandName].run(config, arg);
            } else {
                return COMMANDS[command].run(config);
            }
        }, null)
    }
}

function queryIt(query) {
    return function(config) {
        return _.extend(config, {
            queryResults: esquery.query(config.ast, query)
        })
    }
}
function readIt(filename) {
    return {
        filename: filename,
        code: fs.readFileSync(filename, 'utf-8')
    }
}
function toAst(config) {
    try {
        var ast = esprima.parse(config.code, {
            tokens: true,
            range: true,
            comment: true
        });
        var scopeManager = escope.analyze(ast);
        scopeManager.attach();
        estraverse.traverse(ast, {
            enter: function(node, parent) {
                node.parent = parent;
            }
        });

        return _.extend(config, {
            ast: ast
        })
    } catch (err) {
        console.error(config.filename + ': invalid code, make sure there are no syntax errors!')
        process.exit(1)
    }
}

