#!/usr/bin/env node

var esprima = require('esprima')
var escodegen = require('escodegen')
var estraverse = require('estraverse')
var fs = require('fs')
var objectPath = require('object-path');
var _ = require('underscore')
var esquery = require('mustache-esquery')

esquery.matchMustache = function(node, selector, ancestry) {
    var parts = selector.expr.split(/\s+/);
    var predicateParts = parts.shift().split('.');
    var args = parts;
    var moduleName = predicateParts.shift();
    var namespace = require('../predicates/' + moduleName);
    var predicate = objectPath.get(namespace, predicateParts);
    if (_.isFunction(predicate)) {
        return !!predicate(args, node, ancestry);
    }
    return false;
};

if (process.argv.length !== 5) {
    console.log('')
    console.log('Usage: escut selector command file.js')
    console.log('')
    console.log(prefixLines('@param selector: see https://github.com/keeyip/esquery', '    '))
    console.log(prefixLines('@param command: remove | yank | quote-property | quote-member | "rewrite _.bind({{js callee.object}}, {{splat arguments}})" | json', '    '))
    console.log('')
    console.log(prefixLines('Example: escut "Property[key.name=\'render\'][value.type=\'FunctionExpression\']" "yank" samples/test1.js', '    '))
    console.log('')
    return;
}








var selector = process.argv[2]
var commandStr = process.argv[3]
var filenames = [process.argv[4]]
var codes = _.map(filenames, readIt)
var asts = _.map(codes, toAst)
var queryResults = _.map(asts, queryIt(selector))
var filteredResults = _.map(queryResults, filterIt(commandStr))

//=================================
console.log(filteredResults.join())
//=================================

function filterIt(str) {
    var commands = str.split(/\s*\|\s*/)
    return function(config) {
        estraverse.attachComments(config.ast, config.ast.comments, config.ast.tokens);

        return _.reduce(commands, function(result, command) {
            var matchSpace = command.match(/\s+/);
            if (matchSpace) {
                var commandName = command.substring(0, matchSpace.index);
                var arg = command.substring(matchSpace.index).trim();
                return require('../commands/' + commandName).run(config, arg);
            } else {
                return require('../commands/' + command).run(config);
            }
        }, null)
    }
}

function queryIt(query) {
    return function(config) {
        return _.extend(config, {
            queryResults: esquery.query(config.ast, query)
        })
    }
}
function readIt(filename) {
    return {
        filename: filename,
        code: fs.readFileSync(filename, 'utf-8')
    }
}
function toAst(config) {
    try {
        return _.extend(config, {
            ast: esprima.parse(config.code, {
                tokens: true,
                range: true,
                comment: true
            })
        })
    } catch (err) {
        console.error(config.filename + ': invalid code, make sure there are no syntax errors!')
        process.exit(1)
    }
}
function prefixLines(str, prefix) {
    return _.map(str.split('\n'), function(s) {
        return prefix + s
    }).join('\n')
}

